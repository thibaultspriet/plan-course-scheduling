name: Post Instagram Reels

on:
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      force:
        description: 'Force posting check even if no posts are due'
        required: false
        default: 'false'
  schedule:
    # Optimized schedule for next post
    - cron: '1 18 12 9 *'
jobs:
  post-reels:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Need token with workflow permissions to update other workflows
        token: ${{ secrets.WORKFLOW_TOKEN }}
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Install dependencies
      run: uv sync
        
    - name: Check if posts are due
      id: check_posts
      run: |
        # Check if there are any posts due now
        if [ "${{ github.event.inputs.force }}" = "true" ]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "Force mode enabled, will check for posts"
        else
          # Use a separate script to check for due posts
          result=$(uv run python scripts/check_posts_due.py)
          if [ "$result" = "posts_due" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "Posts are due, proceeding with posting"
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "No posts due now, skipping"
          fi
        fi

    - name: Process pending reel posts
      if: steps.check_posts.outputs.should_run == 'true'
      env:
        INSTAGRAM_ACCESS_TOKEN: ${{ secrets.INSTAGRAM_ACCESS_TOKEN }}
        INSTAGRAM_BUSINESS_ACCOUNT_ID: ${{ secrets.INSTAGRAM_BUSINESS_ACCOUNT_ID }}
      run: |
        uv run python scripts/post_to_instagram.py
        
    - name: Clean up old posted configurations
      if: success() && steps.check_posts.outputs.should_run == 'true'
      run: |
        uv run python scripts/cleanup_old_configs.py
        
    - name: Commit updated config files
      if: success() && steps.check_posts.outputs.should_run == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add config/
        if ! git diff --staged --quiet; then
          git commit -m "Update posted reel configurations [skip ci]"
          git push
        else
          echo "No configuration changes to commit"
        fi

    - name: Reschedule for next post
      if: success() && steps.check_posts.outputs.should_run == 'true'
      run: |
        echo "üîÑ Calculating next post schedule..."
        result=$(uv run python scripts/calculate_next_post_time.py)
        echo "$result"
        
        # Extract cron schedule from output
        cron_line=$(echo "$result" | grep "# - cron:" | head -1)
        if [ -n "$cron_line" ]; then
          cron_schedule=$(echo "$cron_line" | sed "s/# - cron: '//g" | sed "s/'//g")
          echo "üìÖ Next posts found, updating schedule to: $cron_schedule"
          uv run python scripts/update_workflow_cron.py "$cron_schedule"
        else
          echo "üèÅ No more future posts, disabling schedule"
          uv run python scripts/update_workflow_cron.py --disable
        fi

    - name: Commit schedule changes
      if: success() && steps.check_posts.outputs.should_run == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .github/workflows/post-reels.yml
        if ! git diff --staged --quiet; then
          git commit -m "Auto-reschedule for next post [skip ci]"
          git push
        else
          echo "No schedule changes to commit"
        fi